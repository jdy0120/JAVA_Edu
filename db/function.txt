각종 연산자들 및 함수들

연산자
산술 연산자 : + - * / %
 - 사칙연산 및 나머지 연산자가 존해하며, 주로 컬럼단위로 계산됨

비교 연산자 : > >= < <= = like
 - 주로 숫자데이터에 대한 조건을 걸 때 크기비교를 위해 사용됨
 - like : 같은 데이터인지가 아닌 포함되어 있는지를 검사하는 연산자
	like 는 반드시 와일드카드인 '%'를 같이 사용해야 의미가 있음
	와일드카드로는 모든 문자열을 대신하는 '%'와 한 글자를 대신하는 '_'가 있음
	와일드카드를 사용하지 않으면 '='과 동일하게 동작함

논리 연산자 : and or not
 - 조건들에 대한 연산을 해줌
 - not -> and -> or 의 순으로 연산됨

between
 - 범위를 조건으로 검색할 때 사용하는 연산자
 - 예) 컬럼명 between 시작값 and 종료값 : 시작값 부터 종료값 까지를 조건으로 사용

in
 - 주어진 보기에 속하는 지를 검사하는 연산자
 - 예) 컬럼명 in (보기1, 보기2, ... , 보기n)	-- 해당 컬럼의 값이 보기안에 있으면

집계함수
 - 주로 group by 절에서 사용되는 함수들로 데이터들을 묶을 때 사용됨

sum() 함수
 - 합을 구하는 함수로 괄호 안에 컬럼명을 넣으면 해당 컬럼의 값들의 합을 구함
 - 예) sum(price) -> price라는 컬럼의 총합

avg() 함수
 - 평균을 구하는 함수로 괄호 안에 컬럼명을 넣으면 해당 컬럼의 값들의 평균을 구함
 - 예) avg(price) -> price라는 컬럼의 평균
 
count() 함수
 - 레코드 개수를 구하는 함수로 괄호 안에 컬럼명을 넣으면 해당 컬럼의 값들의 개수를 구함
 - 집계함수들 중 유일하게 숫자값이 아닌 컬럼도 사용할 수 있는 함수
 - 예) count(price) -> price라는 컬럼의 레코드 개수
 - count()함수 내에 입력한 컬럼에 null이 있으면 개수에서 빠지므로 정확한 개수를 구할 수 없음
	count()함수의 매개변수로 사용하는 컬럼은 primary key같이 절대 비어있지 않은 컬럼이나 전체 컬럼을 의미하는 와일드카드(*)를 사용해야 함

max() 함수
 - 최대값을 구하는 함수로 괄호 안에 컬럼명을 넣으면 해당 컬럼의 값들의 최대값을 구함
 - 예) max(price) -> price컬럼에서 가장 큰 값

min() 함수
 - 최소값을 구하는 함수로 괄호 안에 컬럼명을 넣으면 해당 컬럼의 값들의 최소값을 구함
 - 예) min(price) -> price컬럼에서 가장 작은 값

stdev() 함수 : 표준편차 구하는 함수
var_samp() 함수 : 분산 구하는 함수


흐름 제어 함수
 - 일반 프로그래밍에서의 분기문과 반복문을 함수로 만들어 놓은 것
 - 실제 분기문과 반복문은 존재하며 여기에서는 select문 등에서 사용할 수 있는 함수를 의미

if() 함수
 - 문법 : if(조건식, 참일 때 할 일, 거짓일 때 할 일)
 - 조건식을 판단하여 참 또는 거짓일 경우 해야 할 일을 각각 지정해 놓음
 - select절과 where절에서 사용가능

ifnull() 함수
 - 문법 : ifnull(수식1, 수식2)
 - 수식1이 null이면 수식2가 null이 아니면 수식1이 실행됨
 - 대부분 수식1은 컬럼이 사용되어 컬럼에 null값이 있을 경우 처리하게 됨

nullif() 함수
 - 문법 : nullif(수식1, 수식2)
 - 수식1과 수식2가 같으면 null을 리턴하고, 다르면 수식1을 리턴

case-when-else-end 연산자
 - 문법
case 수식 when 비교값1 then 처리1 when 비교값2 then 처리2 ... else 기본처리값 end;
 - java의 switc-case문과 비슷한 기능


문자열 함수

ascii() 함수
 - 문법 : ascii(문자) -> 지정한 문자의 아스키코드값을 리턴
 - 아스키코드값을 구할 문자는 영문자만 가능

char() 함수
 - 문법 : char(아스키코드값) -> 지정한 아스키코드값에 해당하는 문자를 리턴

char_length() 함수
 - char_length(문자열) -> 지정한 문자열의 글자 개수를 리턴
 - 사용예) select char_length('abcd가나다라'); -> 8
 - 한글과 영문의 차이없이 한 글자로 계산

length() 함수
 - length(문자열) -> 지정한 문자열의 바이트수를 리턴
 - 사용예) select length('abcd가나다라'); -> 16
 - 한글은 3, 영문은 1byte로 계산됨

concat() 함수
 - 문법 : concat(문자열1, 문자열2, ... , 문자열n)
 - 각 문자열들을 결합하여 하나의 문자열로 리턴하는 함수
 - 사용예) select concat('abc', 'def'); -> 'abcdef'

concat_ws() 함수
 - 문법 : concat(구분자, 문자열1, 문자열2, ... , 문자열n)
 - 각 문자열들을 결합할 때 사이사이에 구분자를 넣어 하나의 문자열로 리턴하는 함수
 - 사용예) select concat_ws('/', '2020', '01', '01'); -> '2020/01/01'

elt() 함수
 - 문법 : elt(위치번호, 문자열1, 문자열2, ... , 문자열n)
 - 위치번호에 해당하는 문자열을 리턴하는 함수
 - 사용예) select elt(2, 'aa', 'bb', 'cc', 'dd'); -> 'bb'
 - 위치번호에 해당하는 문자열이 없을 경우 null을 리턴

field() 함수
 - 문법 : field(찾을 문자열, 문자열1, 문자열2, ... , 문자열n)
 - 문자열들 중 '찾을 문자열'이 있는 위치번호를 리턴하는 함수
 - 사용예) select field('ff', 'aa', 'cc', 'ff', 'zz'); -> 3
 - 찾는 문자열이 없을 경우 0을 리턴

find_in_set() 함수
 - 문법 : find_in_set(찾을 문자열, 문자열셋)
 - 문자열셋에서 '찾을 문자열'이 있는 위치번호를 리턴하는 함수
 - 문자열셋은 쉼표로 구분하며, 공백은 없어야 함
 - 사용예) select find_in_set('ff', 'aa,cc,ff,zz'); -> 3
 - 찾는 문자열이 없을 경우 0을 리턴

instr() 함수
 - 문법 : instr(문자열, 찾는 문자열)
 - 문자열에서 지정한 '찾는 문자열'의 위치번호를 리턴하는 함수
 - 사용예) select instr('abcdefg', 'def'); -> 4
 - 찾는 문자열이 없을 경우 0을 리턴

locate() 함수
 - 문법 : locate(찾는 문자열, 문자열)
 - 문자열에서 지정한 '찾는 문자열'의 위치번호를 리턴하는 함수
 - 사용예) select locate('def', 'abcdefg'); -> 4
 - 찾는 문자열이 없을 경우 0을 리턴
 - instr()함수와 동일한 기능을 가지면 매개변수의 순서만 다름

format() 함수
 - 문법 : format(실수, 자릿수)
 - 실수에서 소수점 아래 자리를 지정한 자릿수에 맞춰 반올림 후 리턴하는 함수
 - 사용예) select format(3.141592, 3); -> 3.142
 - 지정한 자릿수가 넘칠 경우 0으로 채워 리턴
 - 사용예) select format(3.141592, 10); -> 3.1415920000

bin(), hex(), oct() 함수
 - 문법 : bin(10진수), hex(10진수), oct(10진수)
 - 지정된 10진수를 각각 2진수, 16진수, 8진수로 변환하여 리턴
 - 사용예) select bin(31), hex(31), oct(31); -> 11111 | 1F | 37

insert() 함수
 - 문법 : insert(문자열, 위치, 길이, 삽입할 문자열)
 - 문자열의 '위치'에 '길이'만큼 삭제 후 '삽입할 문자열'을 삽입하여 리턴
 - 사용예) select insert('abcdefghij', 3, 4, '@@'); -> 'ab@@ghij'

left() 함수
 - 문법 : left(문자열, 자를 길이)
 - 문자열의 왼쪽 부터 '자를 길이'만큼 잘라내어 리턴
 - 사용예) select left('abcdefghij', 4); -> 'abcd'
 - '자를 길이'가 '문자열'의 문자개수보다 크면 그냥 '문자열'을 리턴

right() 함수
 - 문법 : right(문자열, 자를 길이)
 - 문자열의 오른쪽 부터 '자를 길이'만큼 잘라내어 리턴
 - 사용예) select right('abcdefghij', 4); -> 'ghij'
 - '자를 길이'가 '문자열'의 문자개수보다 크면 그냥 '문자열'을 리턴

mid() 함수
 - 문법 : mid(문자열, 자를 위치, 자를 길이)
 - 문자열의 '자를 위치' 부터 '자를 길이'만큼 잘라내어 리턴
 - 사용예) select mid('abcdefghij', 4, 3); -> 'def'
 - substring()과 substr() 함수도 mid() 함수와 사용법까지 동일함

lcase() 함수
 - 문법 : lcase(문자열)
 - 문자열에 있는 모든 영문 대문자를 소문자로 변환하여 리턴
 - 사용예) select lcase('abCD가나'); -> 'abcd가나'
 - lower() 함수와 사용법까지 동일함

ucase() 함수
 - 문법 : ucase(문자열)
 - 문자열에 있는 모든 영문 대문자를 소문자로 변환하여 리턴
 - 사용예) select ucase('abCD가나'); -> 'ABCD가나'
 - upper() 함수와 사용법까지 동일함

lpad() 함수
 - 문법 : lpad(문자열, 길이, 채울 문자열)
 - '문자열'을 '길이' 만큼 늘린 수 왼쪽으로 '채울 문자열'을 채운 후 리턴
 - 사용예) select lpad('abcd', 7, '#'); -> '###abcd'
 - '길이'가 '문자열'의 길이보다 작게 입력되면 '문자열'을 '길이'만큼 잘라내어 리턴
 - 사용예) select lpad('abcd', 3, '#'); -> 'abc'

rpad() 함수
 - 문법 : rpad(문자열, 길이, 채울 문자열)
 - '문자열'을 '길이' 만큼 늘린 수 오른쪽으로 '채울 문자열'을 채운 후 리턴
 - 사용예) select rpad('abcd', 7, '#'); -> 'abcd###'
 - '길이'가 '문자열'의 길이보다 작게 입력되면 '문자열'을 '길이'만큼 잘라내어 리턴
 - 사용예) select rpad('abcd', 3, '#'); -> 'abc'


Stored Function
 - 보통 함수나 사용자 정의 함수라고 함
 - 스토어드 프로시저에 비해 사용빈도가 낮은 편으로 사용여부는 상황에 맞게 판단
 - 무조건 리턴값이 존재하는 기능
 - 매개변수의 in과 out 구분없이 무조건 in에 해당함
 - 프로시저에서는 내부에서 select문을 사용할 수 있으나 함수에서는 불가함
     select문 사용불가는 실행결과의 집합을 리턴할 수 없으므로 함수에서는 사용불가
     단, select...into 문은 집합 결과를 리턴하는 것이 아니므로 사용가능
 - 프로시저는 여러 SQL문의 실행이나 계산등의 작업에 사용되지만, 함수는 어떤 계산을 통해 하나의 값을 리턴하는 용도로만 사용됨

 - 생성전에 권한을 부여해야 함
set global log_bin_trust_function_creators = 1; -- 함수생성 권한을 부여

delimiter $$
create function 함수명([매개변수]) returns 리턴형식
-- 지정된 이름으로 함수를 생성하겠다는 의미(매개변수는 없을 수도 있음)
begin -- 함수의 시작
    함수 내용으로 SQL 프로그래밍 부분
    return 리턴값;
end $$ -- 함수의 종료
delimiter ; -- 명령의 종료 표시를 다시 ';'으로 되돌린다는 의미

 - 실행방법 : select 스토어드 프로시저명([인수(들)]);
 
 - 함수 삭제 : drop function 함수명;
 
 
