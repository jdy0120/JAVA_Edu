자료(data)
 - 이 세상에 존재하는 모든 것이며, 컴퓨터에 한 해서는 컴퓨터에 입력할 수 있는 디지털화 된 자료들로 한정 지어야 함

정보(information)
 - 자료들 중 쓸만한 것들을 가공하여 만들어내는 결과물

데이터베이스(DataBase)
 - 자료들의 집합으로 단순히 모아 놓는 것에 그치지 않고, 나름의 규칙을 가지고 잘 정리해 놓는 것을 의미(검색이 용이하도록 구현해야 함)

DBMS(DataBase Management System)
 - DB를 관리 및 운영하는 프로그램으로 여러 명의 사용자나 응용프로그램이 공유하고 동시에 접근이 가능하도록 관리해 줌
 - Oracle, MySql, MS-SQL, Maria DB 등

1. DBMS의 분류
 - 계층형 DBMS(Hierarchical DBMS)
	처음 나온 DBMS 개념으로 1960년대에 시작되었으며, 각 계층은 트리 형태를 가지면 1:N 관계를 가짐
	구축한 후 변경이 까다로워 검색을 빠르나 접근의 유연성이 부족한 단점을 가진다.

 - 망형 DBMS(Network DBMS)
	계층형 DBMS의 문제점을 개선하기 위해 1970년 시작되었으며 1:1, 1:N, N:N 관계가 지원되어 빠른 데이터 추출이 가능해짐
	- 단, 계층형과 마찬가지로 매우 복잡한 내부 포인터를 사용하며 개발자가 이 모든 구조를 이해해야만 개발이 가능하다는 단점이 있음

 - 관계형 DBMS(Relational DBMS : RDBMS)
	1969년 E.F.Codd라는 학자가 수학 모델에 근거하여 고안함
	RDBMS의 핵심 개념은 '데이터베이스는 테이블(table)이라 불리우는 최소 단위로 구성된다. 그리고, 이 테이블은 하나 이상의 열(column, field)로 구성되어 있다.' 이다.
	모든 데이터는 테이블에 저장되어 있는 구조이다.
	다른 DBMS에 비해 쉽게 변화에 순응할 수 있는 구조이며, 유지보수 측면에서도 편리하다.
	대용량 데이터의 관리와 데이터 무결성을 보장해 준다.
	단, 시스템 자원을 많이 차지하여 시스템을 전반적으로 느려지게 함(하드웨어의 발전으로 큰 의미 없음)

2. 테이블
 - RDBMS의 기본 구성요소이며, 모든 데이터가 저장되는 곳
 - 하나 이상의 열(column, field)로 구성되며, 특별한 경우가 아니면 데이터가 비어 있어서는 안됨
	빈 곳을 만들지 않기 위해 하나의 테이블이 아닌 여러 개의 테이블로 나누어 저장함으로써 불필요한 공간의 낭비를 줄이고 데이터 저장의 효율성을 보장함
	나뉜 테이블간의 관계를 기본 키(primary key, PK)와 외래 키(Foreign key, FK)를 사용하여 관계를 맺어 줌으로써 두 테이블을 부모와 자식의 관계로 묶어 준다.
 - 데이터가 저장된 테이블(들)에서 결과를 얻고자 할 경우 SQL(Structed Query Language)을 이용하여 얻을 수 있다.

테이블에서 사용되는 기능 및 용어
 - 열(Column, Field) : 테이블의 구성요소로 각 테이블에는 최소 하나 이상의 열이 존재해야 함
 - 열 이름 : 각 열을 구분하기 위한 이름으로 한 테이블에 동일한 열이름이 존재할 수 없다.
	단, 테이블이 다를 경우 동일한 이름의 열이 존재할 수 있음
 - 데이터 타입(자료형) : 각 열에 들어갈 자료의 자료형을 의미하며, 정수, 실수, 날짜, 문자열 등의 자료형이 존재함(자바같은 프로그래밍 언어의 자료형과 비슷하지만 다른 부분도 있음)
 - 행(Row, Record) : 실질적인 사용 가능한 데이터로 테이블의 한 행을 의미
	주로 Record라는 용어를 더 많이 사용함
 - 기본 키(Primary Key, PK, 주키) : 테이블 내의 모든 레코드들을 구분할 수 있는 값으로 절대 중복되어 서는 안되는 값으로 모든 테이블에 작성하는 것을 권장하는 기능
	기본 키의 특징 : 중복불가, 필수입력, 인덱스 생성(검색속도 향상)의 제약조건들을 가짐
	기본 키는 테이블당 하나만 지정할 수 있으며, 두 개 이상의 필드를 묶어서 기본 키로 지정할 수도 있음
 - 외래 키(Foreign Key, FK, 보조키) : 두 테이블 간의 관계를 맺을 때 사용하는 키로 기본 키와 다르게 테이블당 여러 개의 외래 키가 존재할 수 있음
	외래 키와 관계를 맺는 상대 테이블의 필드는 기본 키여야 하며, 관계를 맺게 되면 제약조건이 성립됨


SQL(Structed Query Language : 구조적 질의 어)
 - 에스큐엘, 쿼리 등으로 불리우며 DBMS에 명령을 내리는 언어
 - sql은 DBMS 제작회사 별로 다를 수도 있지만 표준이 있어 표준에 맞는 sql은 어떤 DBMS에서도 사용할 수 있음
	단, 표준으로만 사용하기에는 한계가 있어 각 DBMS별 명령어를 사용하기도 함
	Oracle은 PL/SQL, MS-SQL은 T-SQL, MySql은 SQL이라 부름
 - sql로는 생성, 입력, 변경, 삭제, 조회 등의 작업을 처리 할 수 있음
 - 생성 쿼리
	DB, 테이블, 인덱스, 뷰 등의 객체를 생성할 때 사용하는 쿼리
	문법) create [객체종류] [객체명] [내용];
 - 변경 쿼리
	DB, 테이블, 인덱스, 뷰 등의 객체를 변경할 때 사용하는 쿼리
	문법) alter [객체종류] [객체명] [내용];
 - 삭제 쿼리
	DB, 테이블, 인덱스, 뷰 등의 객체를 삭제할 때 사용하는 쿼리
	문법) drop [객체종류] [객체명] [내용];
 - 데이터 관련 쿼리
	데이터에 직접적으로 영향을 주는 쿼리로 입력, 수정, 삭제, 검색 등의 쿼리가 존재함
	입력 : insert into 테이블명 (컬럼명들) values (값들);
	 - 특정 테이블에 새로운 레코드를 추가할 때 사용하는 쿼리
	수정 : update 테이블명 set 컬럼명 = 값, ... , 컬럼명 = 값 [where 조건];
	 - 특정 테이블의 특정 레코드(들)의 값을 변경할 때 사용
	삭제 : delete 테이블명 [where 조건];
	 - 특정 테이블의 특정 레코드(들)의 값을 삭제할 때 사용
	검색 : select 필드명(들) from 테이블명(들) [where 조건 ...];
	 - 테이블에서 지정한 조건에 맞는 레코드들을 검색하여 출력


테이블 이외의 DB 객체
1. 인덱스(index)
 - 일종의 찾아보기 기능으로 검색속도를 향상해야 할 때 사용됨
 - 변경이 잦거나, 입력 또는 출력이 잦을 경우 오히려 역효과가 날 수 있음
 - 또한 검색결과가 지나치게 많으면 역시 사용하지 않는 것이 좋음
 - 특정 필드를 PK로 지정하면 자동으로 인덱스를 만들어줌

2. 뷰(View)
 - 일종의 가상 테이블로 기존의 테이블(들)의 데이터들을 조합하여 새롭게 만든 뷰 입니다.
 - 뷰를 검색하여도 테이블을 검색하는 것도 동일한 데이터 결과가 나타난다.
 - 속도 향상을 위해 만들어 (검색)속도 향상을 위해 만들어진 객체

3. 스토어드 프로시저(Stored Procedure)
 - DB에 저장되 있는 기능으로 직접 만들어 사용할 수 있음
 - 스토어드 프로시저 사용 시 일반 쿼리보다 프로그래밍에서 처리 속도가 더 빠름
	보안에도 더 뛰어나 프로그래밍시 스토어드 프로시저를 사용하는 경우가 많다.

4. 트리거(Trigger)
 - 특정 데이터를 테이블에 입력, 수정, 삭제 작업이 발생되는 실행되는 코드를 의미
 - 좋은 기능이나 리소스를 많이 차지하는 부분이 있어 자주 사용되는 기능은 아님

5. 함수(Function)
 - 프로시저와 비슷하며, 리턴값이 존재함


MySQL에서의 자료형(DataType)
숫자형식
정수
 - tinyint : 1byte. -128~127까지의 정수 표현
 - smallint : 2byte. -32768~32767까지의 정수 표현
 - mediumint : 3byte. -8388608~8388607까지의 정수 표현
 - int : 4byte. 약 -21억~21억까지의 정수 표현
 - bigint : 8byte. 약 -900경~900경까지의 정수 표현
실수
 - float : 4byte. -3.40E+38~-1.17E-38. 소수점 아래 7자리까지 표현
 - double : 8byte. -1.22E-308~1.79E+308. 소수점 아래 15자리까지 표현

문자데이터 형식
 - char(n) : 1~255자의 문자를 표현하는 고정길이 문자형
 - varchar(n) : 1~65535자의 문자를 표현하는 가변길이 문자형
 - tinytext : 1~255크기의 text데이터
 - text : 1~65535크기의 text데이터
 - mediumtext : 1~16777215크기의 text데이터
 - longtext : 1~4294967295크기의 text데이터(최대 4GB 크기)

BLOB형식 : Binary Large Object - 이미지, 동영상, 문서파일 등의 대용량 이진데이터
 - tinyblob : 1~255크기의 blob데이터
 - blob : 1~65535크기의 blob데이터
 - mediumblob : 1~16777215크기의 blob데이터
 - longblob : 1~4294967295크기의 blob데이터(최대 4GB 크기)

날짜데이터 형식
 - date : 3byte. 1001-01-01~9999-12-31까지 'YYYY-MM-DD'형식의 날짜만 저장
 - time : 3byte. -838:59:59.000000~838:59:59.000000까지 'HH:MM:SS'형식의 시간만 저장
 - datetime : 8byte. 1001-01-01 00:00:00~9999-12-31 23:59:59까지 'YYYY-MM-DD HH:MM:SS'형식으로 저장
 - year : 1byte. 1901~2155까지 'YYYY'형식으로 저장





