2020/07/27
Java
- 1990년대 발표된 언어로서 원래는 작은 전자기기 등에 붙어서 동작되는 시스템프로그램을 위한 언어였으나, PC버전이 발표되어 일반 프로그래밍에서도 사용됨
- 최초의 객체지향프로그래밍(OOP : Object Oriented Programming) 언어이다.
 C언어는 절차지향적 언어로 Java와 동작순서 및 방식에서 차이가 남
- 자바는 또한 컴파일 언어로 개발시간은 느리나, 실행속도가 빠름
 컴파일 언어 : 자바, C, ASP.Net 등이 있음
  - 컴파일 언어는 작업한 파일을 컴파일 단계를 거쳐 컴퓨터가 실행할 수 있는 상태로 만듬
  - 컴파일 단계때문에 개발속도가 느려지나, 컴퓨터가 빠르게 실행할 수 있게 만들어 줌
 인터프리터 언어 : ASP, PHP, Python 등이 있음
  - 한 줄씩 해석하여 실행시키는 언어로 컴파일 단계가 없어 개발속도가 빠름
  - 단, 컴퓨터가 바로 실행할 수 있는 형태가 아니므로 실행속도 면에서는 느림

- 웹에서도 자바를 이용한 서블릿, JSP, 자바빈즈 등의 여러 기술을 사용할 수 있다.

- 자바는 C언어와 달리 OS에 종속이지 않아 한 번 입력한 코드는 OS에 상관없이 동작함
   'One Source Multi Using'
   자바는 JVM(Java Virtual Machine) 위에서 동작하므로 OS의 종류와는 상관없음

자바의 주석(comment)
 - 프로그램 동작에 아무 상관없는 값으로 프로그램에 대한 설명등을 입력함
 - // : '//'부터 한 줄을 주석으로 처리
 - /**/ : '/*'부터 '*/'까지 주석으로 처리(여러 줄 입력 가능)


2020/07/28
변수(variable)
 - 특정 값을 저장하기 위한 메모리 공간
 - 필요에 따라 값을 자유롭게 변경할 수 있음
 - 값의 종류(자료형, data type)에 따라 변수의 크기도 달라짐

기본 자료형(primitive data type)
자료형	크기 및 설명
boolean 1byte, 논리값인 참(true), 거짓(false)을 표현(주로 조건에서 사용됨)
char	2byte, character로 하나의 문자를 저장하기 위한 자료형(유니코드 사용)
 - 반드시 작은 따옴표로 묶어서 표현해야 함

byte	1byte, -128~127의 정수
short	2byte, -32768~32767의 정수
int	4byte, -2147483648~2147483647의 정수로 정수표현의 기본형
 - CPU가 4byte 정수를 가장 빠르게 처리할 수 있으므로 int형을 기본으로 지정함
 - byte나 short형 보다도 int형이 처리가 더 빠름
long	8byte, -9223372036854775808~9223372036854775807로 정수표현의 최대값
 - long형을 넘어가는 정수를 표현해야 할 경우 변수가 아닌 클래스(BigInteger)를 이용함

float	4byte, ±(1.40*10의-45승~3.40*10의38승)
double	8byte, ±(4.94*10의-324승~1.79*10의308승), 실수의 기본형
 - 실수는 표현의 정확성보다 표현의 범위에 초점을 두오 실수 연산시 잘못된 값이 나옴
 - 정확한 실수 연산을 위해서는 특정 클래스(BigDecimal)를 사용해야 함


변수 선언법
 - 변수를 선언하면 해당 자료형의 크기에 맞게 메모리에 공간이 생김
 - 선언법 : 자료형 변수명;

상수(constant)
 - 변수와 같이 기본 자료형의 데이터를 메모리 공간에 저장하는 것
 - 단, 변수와 달리 값을 변경할 수가 없음
 - 공유해야 되는 값을 사용할 때 주로 사용되며, 코드상에서 직접 값을 입력하는 것도 상수로 취급
    리터럴(literal)값 이라고도 함
 - 선언법 : final int JOIN_MONEY = 1000;


자동 형변환(implicit conversion)
 - 자동으로 자료형이 변환되어 사용하는 것
 - byte -> short, char(ASCII값으로 변환되어 int에 저장) -> int -> long -> float -> double
 - 정수는 실수가 될 수 있지만, 실수가 정수로 변환되지는 않음



자바에서의 명명규칙(naming rule)
 - 길더라도 의미있는 영문단어를 사용(한글 발음을 영어로 입력하는 것은 안됨)
 - 영문, 숫자, 언더바, 달러 만을 이용하여 이름을 지어야 함
    첫글자는 무조건 영문으로 지어야 함
 - 예약어(명령어)는 이름으로 사용할 수 없음

 - 클래스 & 인터페이스
    첫글자는 영문 대문자로 하고, 두 단어 이상일 경우 각 단어별 첫글자를 대문자로 함
    예) 회원정보 관련 클래스 : MemberInfo
 - 변수 & 메소드
    첫글자는 영문 소문자로 하고, 두 단어 이상일 경우 각 단어별 첫글자를 대문자로 함
    예) 회원정보 관련 변수 & 메소드 : memberInfo, memberInfo()
 - 상수
    모든 글자를 대문자로 하고, 두 단어 이상일 경우 각 단어의 사이에 언더바를 입력
    예) 회원정보 관련 상수 : MEMBER_INFO



연산자(operator)
[], .
expr++, expr--
++expr, --expr, +expr, -expr, !, (data type)
*, /, %
+, -
<, >, <=, >=
==, !=
&&
||
? expr : expr
=, +=, -=, *=, /=, %=

산술연산자 : + - * / %
 - 피연산자 : 정수와 실수, 결과값 : 정수와 실수
 - 정수끼리 연산하면 결과는 언제나 정수로 나옴, 실수를 연산하면 실수로 결과가 나옴
    단, 정수와 실수를 혼합하여 연산하면 실수가 나옴
 - + : 산술연산으로 숫자를 더하거나, 문자열의 결합을 행함
 - * : 산술연산으로 숫자를 곱하거나, 검색 등에서 와일드 카드로 사용됨 (ALL)
 - / : 나눗셈 연산자로 나눗셈 후 몫을 구함
 - % : 나머지 연산자로 나눗셈 후 나머지를 구함(정수로 연산시 사용됨)

증감연산자 : ++ --
 - 피연산자 : 정수와 실수, 결과값 : 정수와 실수
 - 단항 연산자
 - ++ : 1씩 증가 시킴 (a = a + 1)
 - -- : 1씩 감소 시킴 (a = a - 1)

비교연산자 : < > <= >= == !=
 - < > <= >= 피연산자 : 숫자, == != 피연산자 : 모든 데이터(단, 객체는 null만 비교함)
 - 결과값 : 논리값으로 주로 조건에서 사용됨
 - 산술연산자 보다 우선 순위가 낮음

논리연산자 : ! && ||
 - 피연산자 : 논리값(조건), 결과값 : 논리값
 - 여러 개의 조건(논리값)을 하나의 논리값으로 만드는데 주로 사용됨
 - && : And연산으로 또는 논리곱으로 여러 조건 모두가 참이어야 참이 되는 연산자
    조건들 중 하나라도 거짓이면 전체가 거짓이 되는 연산자
 - || : Or연산 또는 논리합으로 여러 조건 중 하나라도 참이면 참이 되는 연산자
    조건들 모두가 거짓이어야 전체가 거짓이 되는 연산자
 - ! : Not연산 또는 부정으로 조건의 논리값을 반대로 뒤집는 단항 연산자

조건연산자 : ? expr : expr
 - 삼항연산자라고도 하며, 유일하게 피연산자가 3개인 연산자
 - if문으로 완벽하게 호환되므로 사용하지 않을 수도 있음
 - 사용법
조건 ? 값1 : 값2; -> 조건이 참이면 '값1'을 거짓이면 '값2'를 리턴하는 연산자

형변환연산자 : (data type)
 - 괄호안에 변환할 자료형을 입력하면 해당 객체 또는 데이터가 변환되는 단항연산자
 - 단, 형변환이 가능할 경우에만 동작하고, 아니면 예외 발생

대입연산자 : = += -= *= /= %=
 - 변수나 객체 등에 특정 데이터를 넣어주는 연산자
 - 둘 이상의 연산자가 묶인 경우는 복합 연산자로 특정 연산 후 넣어줌
예) a = a + 1; -> a += 1; -> a++;


실행흐름의 제어
 - 기본적으로 실행의 흐름은 위에서 아래로, 왼쪽에서 오른쪽으로 실행됨
    이때 그 실행의 흐름을 제어하는 여러 제어문이 존재
 - 제어문은 크게 분기문과 반복문으로 나뉨
 - 제어문의 실행문(들)은 중괄호 안에서 입력하지만 실행문이 하나일 경우 중괄호 생략가능

분기문
 - 조건에 따라 여러 실행문들 중 특정 실행문만을 실행시키는 제어문
 - 상황에 따라 단 하나의 실행문도 실행되지 않을 수도 있음
 - 종류로는 if, switch, 조건연산자의 세가지가 있음

1. if문
 - 대표적인 분기문으로 다른 분기문들을 대체할 수 있음
 - 조건을 주어 참인 경우 처리할 실행문을 샐행시킴
 - 조건이 거짓인 경우 다른 종류의 실행문을 실행시킬 수 있음
 - 문법
if (조건) {
    조건이 참일 경우 실행할 실행문(들);
}
[
else if (조건2){
    조건2가 참일 경우 실행할 실행문(들);
} else if (조건n){
    조건n이 참일 경우 실행할 실행문(들);
} else{
    모든 조건이 거짓일 때 실행할 실행문(들);
}
]
 - else가 있으면 반드시 하나의 실행문을 실행하게 됨
    else가 없으면 아무것도 실행하지 않을 수도 있다.
 - else문의 조건은 '아니면'이라는 조건이 되지만 생각보다 조건이 큰 경우가 많음
    else의 조건은 반드시 검사를 해봐야 함

2. 조건연산자
 - 삼항연산자라고도 하며, 조건에 따라 맞는 실행문을 실행시킴
 - 단, 한줄로 모든 작업을 끝내야 하므로 작업내용이 길면 사용할 수 없음
 - 문법
조건 ? 참 : 거짓;
 - 조건부분은 괄호로 묶는 경우가 종종 있으나 필수는 아님
 - if문으로 완전히 대체될 수 있어서 사용빈도가 높지는 않음

3. switch문
 - if문과 비슷하게 여러 조건을 주어 조건에 맞는 특정 실행문을 실행하게 해주는 제어문
 - 단, 조건을 직접 입력하는 것이 아닌 비교로만 할 수 있으며, 정수만 사용가능
    단, jdk1.7 이상부터 문자열도 사용가능
 - 문법
switch (정수){
    case 비교값1 :    // '정수'가 '비교값1'이면
        실행문1;
	break;	    // 실행 후 다른 실행문을 실행하지 않고 바로 switch문을 종료시킴
    [
    case 비교값2 : case 비교값2-1 : case 비교값 2-2:
    // '정수'가 '비교값2'이거나 '비교값2-1' 이거나 '비교값2-2' 일 경우
        실행문2;
	break;
    ...
    case 비교값n :
        실행문n;
	break;
    default :	    // 모든 case가 맞지 않을 경우
    	실행문;
    ]
}

반복문
 - 루프(Loop)문이라고도 하며, 조건이 맞는 동안 지정한 실행문(들)을 반보하여 실행시킴
 - 루프문의 조건은 대부분 한 번 돌때마다 조건이 변함
    조건이 참에서 변하지 않는 무한루프도 사용할 수 있으나, 웹에서는 사용할 수 없고 사용하더라도 반드시 루프문을 빠져나올 방법이 존재해야 함
 - 종류로는 while, do-while, for, for-each 등이 있음
 
1. while문
 - 조건이 참인 동안 지정한 실행문을 실행시키는 반복문
 - 일반적으로 DB관련 작업시 많이 사용됨
 - 조건에 따라 실행문이 한 번도 실행되지 않을 수도 있음
 - 문법
while(조건){
   실행문;
   조건변화식;
}

2. do-while문
 - while문과 비슷하나 조건을 검사하는 시점이 다름
 - 조건에 상관없이 무조건 처음 한 번은 싱행되고, 그 후에 조건을 검사함
 - 문법
do{
   실행문;
   조건변화식;
}while(조건);

3. for문
 - while문과 같이 조건이 참인 동안 지정된 실행문을 반복 실행하는 반복문
 - 단, for문 내부에서 변수를 선언 및 초기화 할 수 있고, 증감식도 입력할 수 있음
 - 보통 정해진 횟수가 있는 경우 많이 사용되며, 배열이나 컬렉션에서 사용됨
 - 문법
for(변수 선언 및 초기화 ; 조건 ; 증감식){
   실행문;
}
 - for문에서 선언한 변수는 for문 안에서만 사용할 수 있음
 - 실행순서 : 변수 선언 및 초기화 > 조건 > 실행문 > 증감식 > 조건 > 실행문 > 증감식 ...
 - for문에서 선언하는 변수는 여러 개를 선언할 수 있으며, 증감식도 여러개를 지정할 수 있음
    쉼표로 구분하여 여러 개를 사용

break & continue
 - break : switch문이 아닌 루프문에서 사용할 경우 해당 루프문을 강제로 빠져나감
 - continue : continue명령보다 아래에 있는 명령들을 실행하지 않고 조건절로 올라감

중첩 루프문
 - 루프문 안에서 다른 루프문을 사용하는 것
 - 세가지 루프문 모두 겹쳐서 사용할 수 있음
 - 보통 2차원 배열에서 주로 사용됨