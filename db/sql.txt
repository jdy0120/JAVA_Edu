SQL(Structed Query Language)
 - SQL은 DML, DDL, DCL로 분류됨
 - DML(Data Manipulation Language)은 데이터 조작어로 데이터를 조작(입력, 수정, 삭제, 선택) 하는 데 사용되는 언어
	DML이 사용되는 대상은 테이블의 레코드들이며, 반드시 테이블이 존재해야 함
 - DDL(Data Definition Language)은 데이터 정의 언어로 데이터베이스, 테이블, 뷰, 인덱스 등의 데이터베이스 객체를 생성, 수정, 삭제 시에 사용됨
 - DCL(Data Control Language)은 데이터 제어 언어로 사용자에게 권한을 부여하거나 빼앗을 때 사용되는 언어


테이블 생성
create table 테이블명 (
	컬럼명1 자료형1 [제약조건들], 
	컬럼명2 자료형2 [제약조건들], 
	...
	컬럼명n 자료형n [제약조건들], 
	[외래 키 제약조건(들)]
);

 - 제약조건
	데이터의 무결성을 지키기 위한 제한된 조건을 의미
	PRIMARY KEY 제약조건
	 - 특정 컬럼을 기본 키로 지정하는 제약조건
	 - 사용법 : 테이블 생성시 : 컬럼명 자료형 primary key
	 - 여러 컬럼을 기본 키로 지정할 경우 컬럼 정의 밑에서 
		constraint 기본키명 primary key (기본키로 묶을 컬럼명 들)
		기본키명 : 기본키 제약조건의 이름으로 중복되면 안됨(예 : pk_컬럼명들)

	FOREIGN KEY 제약조건
	 - 두 테이블 사이의 관계를 선언함으로써 데이터의 무결성을 보장해 주는 역할을 함
	 - 사용법 : 테이블 생성문 가장 아래에 다음과 같이 입력
		constraint 외래키명 foreign key (컬럼명) 
			references 참조테이블명(참조컬럼명) on [delete | update] cascade
	 - 참조 컬럼은 반드시 기본 키 또는 unique 제약조건을 가진 컬럼이어야 함
	 - cascade 옵션을 지정하지 않으면 자동으로 on [update | delete] no action으로 지정됨

	UNIQUE 제약조건
	 - 특정 컬럼에 중복불가 제약조건을 걸어줌. 단, null값은 허용됨

	DEFAULT 제약조건
	 - 특정 컬럼에 데이터를 입력하지 않으면 자동으로 들어갈 값을 지정해 놓는 제약조건
	 - 숫자나 문자열등의 특정 값도 가능하지만 now() 등과 같은 함수도 사용할 수 있음
	 - 사용예 : 컬럼명 자료형 default 100 -- 현 컬럼에 값을 넣지 않으면 100이 들어감

	NULL 값 허용
	 - 특정 컬럼을 비워둘 수 있는지 여부를 지정하는 제약조건
	 - 사용예
		컬럼명 자료형 null -- 현 컬럼은 비워둘 수 있다(기본값)
		컬럼명 자료형 not null -- 현 컬럼은 비워둘 수 없다

테이블 삭제
 - 테이블 자체를 삭제하므로 그 안의 데이터들도 같이 삭제됨
drop table 삭제할 테이블명;

테이블 수정
 - 테이블 구조를 수정하는 구문
alter table 테이블명 [...];
 - 컬럼 추가
	alter table 테이블명 add 컬럼명 자료형 제약조건 [first | after 기존컬럼명];
 - 컬럼명 및 자료형 변경
	alter table 테이블명 change column 기존컬럼명 새컬럼명 자료형;
	 - 변경이 일어나지 않도록 해야 하며, 변경시에도 주의해서 작업해야 함
 - 컬럼의 제약조건 삭제
	alter table 테이블명 drop [primary key | foreign key 외래키명];

임시 테이블 생성
 - 임시 테이블은 잠시동안 작업하고 사라질 테이블을 의미
 - 삭제되는 시점
	사용자가 직접 drop table로 삭제할 경우
	Workbench를 종료할 경우
	MySQL 서비스가 종료되거나 재시작할 경우
 - 문법
create temporary table 임시테이블명 ( 컬럼들 정의 );
	일반 테이블과 문법은 동일하며 'temporary'만 붙여주면 됨


기본쿼리
 - 사이트내에서 사용할 쿼리들로 입력(insert), 수정(update), 삭제(delete), 검색(select) 등이 있음(테이블이 존재하는 상태에서 사용됨)

데이터 입력 : insert
 - 문법
insert into 테이블명 (컬럼명1, 컬럼명2, ... , 컬럼명n) values (값1, 값2, ... , 값n);
 - 모든 컬럼에 값을 넣는 경우 컬럼명을 생략할 수 있음
 - 입력한 컬럼명의 순서대로 값을 지정해야 함

 - 테이블에 데이터를 한 번에 많이 입력하기 위해 다른 테이블에 있는 데이터를 가져다 insert하기도 함
insert into 테이블명 (컬럼명1, 컬럼명2, ... , 컬럼명n) select문;

 - 테이블도 만들면서 데이터를 입력하는 방법
create table 테이블명 (select문);

데이터 수정 : update
 - 문법
update 테이블명 set 컬럼명1 = 값1, 컬럼명2 = 값2, ... , 컬럼명n = 값n [where 조건];
 - where절은 생략가능하지만 실제로는 거의 생략되는 경우가 없음
 - 수정하는 컬럼의 순서는 테이블의 컬럼 순서와 무관함
 - where절의 경우 철저한 검사가 필요함(select문을 이용하여 검사하면 됨)
 - 수정시 다른 컬럼의 값을 이용해도 됨
	예) price = price * 0.9

데이터 삭제 : delete
 - 문법
delete from 테이블명 [where 조건];
 - 테이블의 레코드를 삭제하는 명령이지 테이블을 삭제하는 명령은 아님
 - update문과 마찬가지로 where절은 생략가능하지만 실제로는 거의 생략되는 경우가 없음
 - 한 번 삭제하면 다시 되살릴 수 없으므로 주의해서 작업해야 함
 - where절의 경우 철저한 검사가 필요함(select문을 이용하여 검사하면 됨)

데이터 검색 : select
 - 가장 많이 사용하고, 가장 어려운 쿼리임
 - 문법
select [distinct] 컬럼명(들) 또는 *		-- 검색할 컬럼명들 또는 전체 컬럼(*)
 -- distinct : 동일한 데이터는 하나만 가져오게 해주는 명령어
from 테이블명(들)			-- 검색할 데이터들이 들어있는 테이블(들)
[
[left | right] join		-- 여러 테이블에서 데이터를 검색할 경우 테이블들을 연결하는 기능
where 조건(들)			-- 검색 조건(들) : 여러 개일 경우 and 또는 or로 묶어서 작업
group by 컬럼명(들)		-- 지정한 컬럼을 기준으로 묶어서 데이터를 추출
having 조건(들)			-- group by에 필요한 조건(들) : 주로 집계함수 사용
order by 컬럼명(들) [asc | desc]		-- 정렬기준으로 오름차순(asc), 내림차순(desc) 사용
 -- 여러 개의 컬럼을 지정한 왼쪽의 컬럼이 기준이 되어 정렬됨
limit [시작인덱스, ] 레코드개수	-- MySQL전용 명령으로 검색할 레코드의 위치 및 개수를 지정
]
 - 컬럼명이 너무 길거나, 동일하거나, 계산식일 경우 컬럼명 임의로 변경하여 데이터들을 추출할 수 있음
	진짜 컬럼명이 변경되는 것은 아니며, 현 select의 결과에서만 바뀜
	임의로 변경하는 것을 alias라 하며 '컬럼명 as 임시별칭'의 방법으로 이름을 지정함
	임시별칭을 지정할 때 'as'는 생략가능















