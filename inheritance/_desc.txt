상속(inheritance)
 - 특정 클래스(하위, sub클래스)에서 다른 클래스(상위, super클래스)에게 멤버(변수, 메소드)들을 상속받는 것
	단, private으로 선언된 멤버도 상속이 되기는 하지만 접근시 간접적으로 접근해야 함
	static멤버도 상속받아 사용가능(하위클래스의 이름으로 접근가능)
 - 자바는 모든 클래스(Object 제외)가 상속을 받고 있는 중임
 - 자바에서의 상속은 코드의 재활용이 목적이 되진 않음
	상속의 이유 : 상속 관계의 클래스들 끼리 공통적인 규약을 만들기 위해
 - 자바에서는 단일상속만을 지원하므로 상위클래스는 하나만 존재함
	타언어(C언어)에서는 다중상속을 지원함
 - 문법
class 하위클래스명 extends 상위클래스명 {
	하위클래스생성자 {
		super();
		// 상위클래스의 생성자 호출(반드시 하위클래스의 생성자안에서 상위클래스의 생성자를 호출해야 함)
		// 하위클래스에 생성자가 없으면 자동으로 JVM이 상위클래스의 디폴트 생성자를 호출해줌
	}
}

 - 상위클래스형으로 선언한 인스턴스에는 하위클래스의 인스턴스가 들어갈 수 있음
	JVM에 의해 내용은 하위클래스이지만 인식은 상위클래스형으로 인식되어 상위클래스의 메소드만을 사용할 수 있음
	단, 오버라이딩된 메소드의 경우는 예외적으로 하위클래스의 메소드가 실행됨


상속을 위한 관계
 - 특정 조건에 맞는 관계끼리의 클래스들을 상속관계에 놓는다.
 - 문법적으로는 어떠한 관계의 클래스들이라도 상관없지만 자바에서의 상속의 목적에는 위배됨
 - IS-A 관계
	'하위클래스 is a 상위클래스'의 관계가 성립될 때를 의미
	즉, 하위클래스가 상위클래스의 일종일 경우 성립됨
 - HAS-A 관계
	'하위클래스 has a 상위클래스'의 관계가 성립될 때를 의미
	즉, 하위클래스가 상위클래스를 소유하고 있는 경우 성립됨
	단, 소유하지 않는 경우가 있을 경우 상속에 대해서는 다시 생각해 봐야 함
	 - 소유하지 않는 경우가 있는지 여부를 판단하여 있다면 상속이 아닌 복합방식으로 표현해야 함
		java/inheri/HASAComposite.java 에서 구현
	 - 무리해서 상속으로 표현하면 소유하지 않는 경우의 인스턴스를 표현할 방법이 없음


오버라이딩(overriding)
 - 하위클래스에서 상위클래스의 메소드를 재정의하는 것
	오버로딩과 다르게 선언부는 완전히 동일(매개변수도 동일)
 - 오버라이딩시 반드시 원본 메소드보다 넓거나 같은 범위의 접근제어지시자를 사용해야 함
	원본 메소드가 public이면 오버라이딩되는 메소드도 무조건 public이어야 함
 - 하위클래스의 인스턴스를 통해 오버라이딩된 메소드를 호출하면 무조건 하위클래스의 메소드가 실행됨


Object 클래스
 - java.lang.Object 클래스는 자바의 모든 클래스들의 최상위 클래스로 모든 클래스들이 상속받고 있는 클래스이다.
 - Object 클래스의 상속은 입력하지 않아도 됨
 - 주요 메소드
리턴		메소드명 및 설명
Object	clone() : 객체를 복제하여 리턴
boolean	equals(Object obj) : 동일한 객체인지 여부를 리턴
 - 단, String에서는 오버라이딩하여 문자열이 같은지 여부를 리턴
String	toString() : 객체를 출력하려 할 때 문자열로 변환시켜 리턴(형변환 아님)
 - 클래스들 별로 오버라이딩을 해놓는 것을 권장하는 메소드


final 키워드
 - 변수에서 final을 사용하면 상수가 되어 초기화 이후 값을 변경할 수 없게 됨
	선언 : final 자료형 변수명;
 - 메소드에서 final을 사용하면 오버라이딩을 불허한다는 의미
	선언 : final 리턴타입 메소드명()
 - 클래스에서 final을 사용하면 상속받지 말라는 의미
	선언 : final class 클래스명


abstract 클래스
 - '추상(화)' 클래스라고도 하며, 미완성된 클래스를 의미
	예) abstract class 클래스명
 - 하나 이상의 abstract메소드를 가지고 있는 클래스를 abstract클래스라고 함
	abstract메소드 : 선언부만 있고, 구현부는 없는 메소드
	예) 접근제어지시자 abstract 리터타입 메소드명();
 - 오직 상속만을 위해 존재하는 클래스로 인스턴스 생성이 불가능함
	abstract클래스가 상위클래스여야 함
 - abstract클래스를 상속받은 하위클래스에서는 반드시 상위클래스에 있는 abstract메소드를 오버라이딩하여 구현해야 함
	만약 하위클래스에서 abstract메소드를 오버라이딩하지 않으면 하위클래스도 abstract클래스로 선언해야 함

인터페이스(interface)
 - 완벽한 abstract클래스는 인터페이스가 될 수 있음
	완벽한 abstract클래스 : 클래스내의 모든 메소드가 abstract일 때를 의미
 - 인터페이스는 일종의 클래스이나 인스턴스를 생성할 수 없고, 모든 메소드가 미완성
 - 인터페이스는 abstract클래스와 달리 상속이 아닌 구현(implements)으로 작업됨
 - 단일 상속만을 지원하는 자바에서 다중 상속의 효과를 줄 수 있음
 - 인터페이스끼리는 서로 상속이 가능
 - 인터페이스에서 선언된 변수는 자동으로 public static final로 선언됨
 - 인터페이스에서 선언된 메소드는 자동으로 public abstract로 선언됨





