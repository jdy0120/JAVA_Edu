함수(function)
 - 자바에서의 메소드와 같은 개념으로 자주 사용되는 특정 작업에 대한 코드를 함수로 지정하여 필요할 때 호출하여 사용하기 위한 기능
 - 함수는 크게 사용자 정의 함수와 내장 함수로 구분되며, 사용자 정의 함수는 개발자가 필요에 의해 만든 함수이고, 내장 함수는 자바스크립트에 이미 내장되어 있는 함수로 이름이나 사용법 등이 정해져 있음

사용자 정의 함수
 - 개발자가 직접 선언하여 사용하는 함수로 함수명, 매개변수, 리턴타입 등을 지정해야 함
 - 문법(명시적 함수)

function 함수명([매개변수(들)]) {
	실행문(들);
	[return 값;]
}

 - 문법(함수 표현식(무명 함수)) : 함수 이름을 부여하지 않고, 함수를 변수에 할당하듯이 선언된 함수 var 변수 = function([매개변수(들)]){
	실행문(들);
	[return 값;]
 }
	
	함수 표현식으로 선언된 함수는 반드시 호출식보다 위에 존재해야 함

내장함수
 - 자바스크립트가 자체적으로 제공하는 함수를 의미한다.
1) eval() 함수
 - 문자열로 입력된 값을 자바스크립트 코드로 인식하여 처리하는 함수
 - 예) eval("1+2+3+4") => 10

2) parseInt() 함수
 - 지정한 값을 숫자(정수 또는 2,8,16진수)로 변환하여 리턴하는 함수
 - 사용법 : parseInt(String[, nBase]);
	예) parseInt("45.99") => 45

3) parseFloat() 함수
 - 지정한 값을 실수형으로 변환하여 리턴하는 함수
 - 사용법 : parseFloat(String);
 - 예) parseFloat("1.23ab") : 1.23, parseFloat("ab1.23") : NaN,
 		parseFloat("1.2ab3") : 1.2
		변환하려는 값에 문자열이 있으면 예)와 같이 동작함

4) isFinite() 함수
 - 지정된 값이 '유리수'인지 여부를 리턴
 - 사용법 : isFinite(String)
 - 예) isFinite("123e5") : true, isFinite("10/3") : false

5) isNaN() 함수
 - 지정된 값이 숫자가 아니지 여부를 리턴
 - 사용법 : isNaN(String)

6) Number() 함수
 - 문자열을 숫자로 변환하여 리턴하는 함수
 - 사용법 : Number(String)

7) String() 함수
 - 숫자를 문자열로 변환하여 리턴하는 함수
 - 사용법 : String(숫자)
 -예) String(1234) : 1234

8) call() 함수
 - 다른 객체에 속한 메소드를 사용할 수 있음
 - 사용법 : call(객체명)

7) shift()메소드
 - 배열의 첫번째 요소를 추출하면서 배열에서는 삭제하는 메소드
 - 문법 : 배열멍.shift()
 - 예) ["a","b","c","d"].shift() -> "a"
 - pop() 메소드와 반대로 첫번째 데이터를 가져옴

8) unshift() 메소드
 - 배열의 첫부분에 지정한 값을 추가시키는 메도스
 - 문법 : 배열명.unshift(값1,값2,값3,...,값n)
 - 예) [1,2,3].unshift("a","b") -> ["a","b",1,2,3]
 - push() 메소드와 반대로 첫부분에 데이터를 넣음

9) splice() 메소드
 - 배열의 특정 부분을 다른 값으로 대체시키는 메소드
 - 문법 : 배열명.splice(삭제할 시작위치, 삭제할 종료위치, 삽입할 값1, 값2, ... , 값n)
 - 예) [1,2,3,4,5].splice(1,2,10,11,12) -> [1,10,11,12,4,5]

10) slice() 메소드
 - 배열의 일부를 잘라내어 새로운 배열로 생성하는 메소드
 - 문법 : 배열명.slice(시작위치[, 종료위치])
 - 예) [1,2,3,4,5].slice(1,3) -> [2,3]
 - 종료위치에서 1을 뺀 위치까지 잘라냄
 - 종료위치를 생략하면 배열의 끝까지 잘라냄
 - 잘라냄과 상관없이 원본배열은 변화가 없음

11) sort() 메소드
 - 배열을 오름차순 정렬함
 - 문법 : 배열명.sort()
 - 예) [1,3,5,2,4].sort() -> [1,2,3,4,5]

12) reverse() 메소드
 - 배열의 요소들의 위치를 뒤집어 주는 메소드
 - 문법 : 배열명.reverse()
 - 예) [1,3,5,2,4].reverse() -> [4,2,5,3,1]
 - 먼저 sort()를 한 후 reverse()를 하면 내림차순 정렬이 됨
 - 원본 배열의 위치가 바뀜

13) delete() 메소드

2. String 객체
 - 문자열에 대한 각종 작업 기능들을 제공해주는 객체
 - 자바스크립트에서의 String객체에는 자바와 유사한 메소드들이 많이 존재함

2-2. 문자열 메소드
1) charAt()
 - 문자열에서 지정한 인덱스에 해당하는 한 글자를 리턴
 - 문법 : 문자열.charAt(index)
 - 예) "abcdefg".charAt(3) -> "d"

2) concat()
 - 문자열에 지정한 문자열을 연결하여 새로운 문자열로 리턴
 - 문법 : 문자열.concat(추가할 문자열)
 - 예) "abcd".concat("_efgh") -> "abcd_efgh"

3) indexOf()
 - 문자열에서 지정한 문자열의 위치를 리턴
 - 문법 : 문자열.indexOf(찾을 문자열[, index])
 - 예) "abcd".indexOf("c") -> 2
 - 못 찾으면 -1을 리턴

4) indexOf()
 - 문자열에서 지정한 문자열의 위치를 뒤에서 부터 찾아 리턴
 - 문법 : 문자열.indexOf(찾을 문자열)
 - 예) "abcd".indexOf("c") -> 2
 - 못 찾으면 -1을 리턴

5) charCodeAt()
 - 문자열에서 지정한 인덱스에 해당하는 한 글자의 유니코드값을 리턴
 - 문법 : 문자열.charCodeAt(index)
 - 예) "ABCD".charCodeAt(0) -> 65

6) match()
 - 문자열에서 지정한 문자열과 동일한 값이 있는지 검사
 - 문법 : 문자열.match(찾는 문자열)
 - 예) "abcd".match("c") -> "c"
 - 못 찾으면 null을 리턴

7) replace()
 - 문자열에서 특정 문자열을 이용하여 지정한 문자열로 변경하는 메소드
 	단, 변경하는 값 처음 하나만 변경됨
 - 문법 : "abcabc".replace("b","z") -> "azcabc"

8) search()
 - 문자열에서 지정한 문자열의 위치(인덱스)를 리턴
 - 문법 : 문자열.search(찾는 문자열)
 - 예) "abcd".search("bc") -> 1
 - 찾는 문자열이 없으면 -1을 리턴

9) slice()
 - 문자열의 일부를 잘라내어 새로운 문자열로 리턴
 - 문법 : 문자열.slice(시작 인덱스, 종료 인덱스 - 1)
 - 예) "abcdefghi".slice(2,7) -> "cdefg"

10) split()
  - 문자열을 지정한 구분자를 기준으로 잘라서 무자열 배열로 생성
  - 문법 : 문자열.split(구분자)
  - 예) "ab:cd:efg:hij".split(":") -> ["ab","cd","efg","hij"]

11) substring()
 - 문자열의 일부를 잘라내어 새로운 문자열로 리턴
 - 문법 : 문자열.substring(시작 인덱스, 종료 인덱스 - 1)
 - 예) "abcdefghi".substring(2,7) -> "cdefg"
 - slice()메소드와 동일

12) substr()
 - 문자열의 일부를 잘라내어 새로운 문자열로 리턴
 - 문법 : 문자열.substring(시작 인덱스, 잘라올 개수)
 - 예) "abcdefghi".substring(2,7) -> "cdefghi"

13) toLowerCase()
 - 문자열의 영문들을 소문자로 변환
 - 문법 : 문자열.toLowerCase()
 - 예) "AvCdEf".toLowerCase() -> "avcdef"

13) toUpperCase()
 - 문자열의 영문들을 대문자로 변환
 - 문법 : 문자열.toUpperCase()
 - 예) "AvCdEf".toUpperCase() -> "AVCDEF"

Date 객체
 - 자바스크립트에서 사용하는 날짜/시간 관련 객체로 문자열이나 숫자로도 표현이 가능
 	숫자 표현은 1970-01-01 0시 부터 밀리 초로 계산된 시간값을 의미

 - 객체 생성
new Date() : 오늘 날짜 및 현재 시간으로 Date객체 생성
new Date(year,month,day) : 지정한 년월일로 Date객체 생성
new Date(year,month,day,hour,minute,second,millisecond) : 지정한 년월시분초밀리초로 Date객체 생성
 : 지정한 년월일시분초밀리초로 Date객채 생성

 - get메소드
 	날짜 및 시간 데이터에서 원하는 데이터만 추출하는 메소드들
	getDate() : 일(day : 1~31) 부분 추출
	getDay() : 요일(0~6 : 0이 일요일) 부분 추출
	getFullYear() : 연도를 4자리로 추출
	getHours : 시간(0~23)을 24시간제로 추출
	getMonutes() : 분(0~59) 부분 추출
	getMonth() : 월(0~11) 부분 추출
	getSeconds() : 초(0~59) 부분 추출
	getTime() : 1970-01-01 0시부터 지정된 시간까지 밀리초로 표현

 - set메소드
 	날짜 및 시간 데이터에 원하는 데이터를 지정하는 메소드
	setDate() : 일(day : 1~31) 부분 설정
	setDay() : 요일(0~6 : 0이 일요일) 부분 설정
	setFullYear() : 연도를 4자리로 설정
	setHours : 시간(0~23)을 24시간제로 설정
	setMonutes() : 분(0~59) 부분 설정
	setMonth() : 월(0~11) 부분 설정
	setSeconds() : 초(0~59) 부분 설정
	setTime() : 1970-01-01 0시부터 지정된 시간까지 밀리초로 설정

Math 객체
 - 숫자에 대한 수학적 작업을 위한 객체
 - 객체 생성시 new를 쓰지 않고 바로 Math.메소드명() 의 형식으로 사용하면 됨
 - 주요 메소드
abs(x) : 지정한 인수의 절대값 리턴
ceil(x) : 올림
floor(x) : 내림
max(x1,x2,...,xn) : 주어진 값들 중 최대값 리턴
min(x1,x2,...,xn) : 주어진 값들 중 최솟값 리턴
pow(x,y) : x의 y승
random() : 0과 1사이의 난수
round(x) : 반올림