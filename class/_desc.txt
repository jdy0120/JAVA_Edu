메소드(method)
 - 클래스 내부에 정의되며, 실제 작업을 처리하는 영역
 - 객체가 가진 기능을 구현해 놓은 것
 - 선언법
접근제어지시자 [static] 리턴타입 메소드명([매개변수(들)]) { 메소드 내용; }
    접근제어지시자 : 접근할 수 있는 권한을 부여하는 키워드
     - public, protected, default, private 중 택일
    static : 클래스 멤버 여부를 지정, 생략 가능
     - main() 메소드는 무조건 static으로 선언해야 함
     - main() 메소드가 들어있는 클래스에서는 무조건 static으로 선언해야 함
    리턴타입 : 메소드의 실행결과를 리턴할 지와 리턴시 리턴값의 자료형을 지정
     - void : 리턴값이 없는 메소드를 의미
     - 모든 종류의 데이터타입 : 리턴값은 자료형의 구분없이 사용할 수 있음
    메소드명 : 변수와 동일한 방식으로 이름을 지음
     - 멤버변수 값 변경(setter) : set변수명();
     - 멤버변수 값 참조(getter) : get변수명();
     - 리턴타입이 boolean일 경우 getter는 : is변수명();
     - 각 변수들의 값을 초기화시키는 메소드 : init~();
    매개변수 : 인수, 파라미터(parameter), 아규먼트(argument) 등으로 불리기도 함
     - 경우에 따라 없을 수도 있으며, 메소드 실행 종료시 매개변수도 소멸함

main() 메소드
 - 프로그램(웹은 제외) 마다 최소 하나 이상씩 존재해야 하는 필수 메소드
 - 프로그램의 시작과 종료를 의미함(main()메소드가 종료되면 프로그램도 꺼짐)

return 키워드
 - 리턴타입이 있는 메소드에서는 특정 데이터를 리턴하는 역할을 함
 - void 메소드에서는 리턴값 없이 return을 사용하며, 메소드를 강제로 종료시킴


클래스(class)
 - 자바를 이루고 있는 객체(Object)로 모든 자바의 내용은 클래스 안에 들어있음
 - 클래스 내부에는 멤버라고 불리우는 값(변수, 상수)과 기능(메소드)이 존재함
    멤버변수 : 클래스가 가지는 각종 값들로 변수 또는 상수로 존재함
    멤버메소드 : 클래스로 할 수 있는 여러가지 기능을 구현해 놓은 것


인스턴스(instance)
 - 클래스를 기반으로 생성하는 객체로 일반적으로 객체라하면 인스턴스를 의미
 - 다른 클래스의 멤버(주로 메소드)들을 사용하기 위해 생성하는 경우가 많다.


생성자(constructor)
 - 모든 클래스에 하나 이상 존재하는 일종의 메소드로 인스턴스를 생성시켜줌
    생성자를 만들지 않으면 JVM에서 자동으로 디폴트 생성자를 만들어 줌
 - 생성자는 인스턴스 생성시에만 한 번 동작됨(두 번 다시 호출 안됨)
    다시 호출하려면 다른 인스턴스를 생성해야 함(인스턴스당 한 번만 실행 가능)
 - 생성자의 이름은 반드시 클래스의 이름과 동일해야 함
 - 생성자는 리턴타입이 없는 메소드임(void도 아닌 아예 생략함)
 - 주로 멤버변수 들의 초기화에 많이 사용됨

정보은닉
 - 멤버변수에 다른 클래스에서 인스턴스를 이용하여 직접적으로 접근하는 것을 막는 것
 - 멤버변수의 앞에 접근제어지시자를 'private'으로 붙여줌
 - 모든 멤버변수에 붙여야 하는 것은 아니지만 거의 대부분의 멤버변수에는 붙여야 함
    private이 붙지 않는 멤버변수가 있으면 정말 붙이지 않아도 되는지 검사해야 함
 - private이 붙은 멤버변수에 접근하려면 메소드(setter나 getter)를 이용해야 함
 - 멤버상수의 경우에는 상황에 따라 prvate이 붙지 않을 수도 있음

지시자		같은 클래스		동일 패키지		상속 클래스		기타 영역
private		   o		   x		   x		   x	
default		   o		   o		   x		   x
protected	   o		   o		   o		   x
public		   o		   o		   o		   o


클래스 멤버
 - 멤버들 중 'static'이 붙는 멤버를 클래스 멤버라 함
    일반적으로 멤버라 하면 인스턴스 멤버를 의미하여, 인스턴스를 빼고 그냥 '멤버'라고 표현함
 - 클래스멤버는 모든 인스턴스에서 공유됨
 - 인스턴스와 상관없이 클래스이름으로도 접근이 가능하며, 인스턴스를 통해서도 접근가능
    보통은 인스턴스가 아닌 클래스 이름을 이용하여 접근함
 - 클래스멤버는 인스턴스가 생성되기 전에 이미 메모리에 생성되어 있음
 - 클래스메소드로 지정하려면 반드시 메소드 내부에서 인스턴스 변수를 참조하는 일이 없어야 함